{"version":3,"sources":["utils/polyfill/base64.polyfill.js","core.module.js","constants/constants.module.js","directives/directives.module.js","filters/filters.module.js","utils/utils.module.js","providers/providers.module.js","constants/filetype.constant.js","providers/mimetype.provider.js","utils/utils.service.js","filters/mimetype.filter.js","utils/polyfill/string.polyfill.js"],"names":["angular","module","constant","iVBORw0KGgo","regex","name","type","offset","/9j/","JVBERg","R0lGOD","SUkqAA","TU0AKg","AAABAA","OEJQUw","mimeTypeProvider","provider","UtilService","hexToBase64","str","btoa","String","fromCharCode","apply","replace","split","base64ToHex","flag","i","bin","atob","hex","length","tmp","charCodeAt","toString","join","hop","obj","key","Object","prototype","hasOwnProperty","call","escapeRegExp","string","service","filter","$util","fileType","fromString","input","EMPTY_STRING","part","res","prop","startsWith","isArray","substr","MAX_LEN","toUpperCase","test","regStr","compStr","RegExp","args","arguments","Array","ArrayBuffer","fromArrayBuffer","Blob","fromBlob","window","tableStr","table","base64","Error","n","j","len","a","indexOf","b","c","d","isNaN","str2","this"],"mappings":"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","file":"angular-mimetype.min.js","sourcesContent":["if (!window.atob) {\n  var tableStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var table = tableStr.split(\"\");\n\n  window.atob = function(base64) {\n    if (/(=[^=]+|={3,})$/.test(base64)) throw new Error(\"String contains an invalid character\");\n    base64 = base64.replace(/=/g, \"\");\n    var n = base64.length & 3;\n    if (n === 1) throw new Error(\"String contains an invalid character\");\n    for (var i = 0, j = 0, len = base64.length / 4, bin = []; i < len; ++i) {\n      var a = tableStr.indexOf(base64[j++] || \"A\"),\n        b = tableStr.indexOf(base64[j++] || \"A\");\n      var c = tableStr.indexOf(base64[j++] || \"A\"),\n        d = tableStr.indexOf(base64[j++] || \"A\");\n      if ((a | b | c | d) < 0) throw new Error(\"String contains an invalid character\");\n      bin[bin.length] = ((a << 2) | (b >> 4)) & 255;\n      bin[bin.length] = ((b << 4) | (c >> 2)) & 255;\n      bin[bin.length] = ((c << 6) | d) & 255;\n    }\n    return String.fromCharCode.apply(null, bin).substr(0, bin.length + n - 4);\n  };\n\n  window.btoa = function(bin) {\n    for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {\n      var a = bin.charCodeAt(j++),\n        b = bin.charCodeAt(j++),\n        c = bin.charCodeAt(j++);\n      if ((a | b | c) > 255) throw new Error(\"String contains an invalid character\");\n      base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +\n        (isNaN(b) ? \"=\" : table[((b << 2) & 63) | (c >> 6)]) +\n        (isNaN(b + c) ? \"=\" : table[c & 63]);\n    }\n    return base64.join(\"\");\n  };\n\n}","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype', ['mg.mimetype.filters', 'mg.mimetype.directives', 'mg.mimetype.constants']);\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.constants', []);\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.directives', []);\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.filters', ['mg.mimetype.utils', 'mg.mimetype.constants']);\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.utils', []);\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.providers', []);\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.constants')\n    .constant('fileType', {\n      // .PNG....\n      \"iVBORw0KGgo\": {\n        \"regex\": \"^89504E470D0A1A0A\",\n        \"name\": \"png\",\n        \"type\": \"image/png\",\n        \"offset\": \"0\"\n      },\n      \"/9j/\": [\n        // ÿØÿÛ\n        {\n          \"regex\": \"^FFD8FFDB\",\n          \"name\": \"jpeg\",\n          \"type\": \"image/jpeg\",\n          \"offset\": \"0\"\n        },\n        // ÿØÿà ..JF IF..\n        {\n          \"regex\": \"^FFD8FFE0[0-9a-fA-F]{4}4A4649460001\",\n          \"name\": \"jfif\",\n          \"type\": \"image/jpeg\",\n          \"offset\": \"0\"\n        },\n        // ÿØÿá ..Ex if..\n        {\n          \"regex\": \"^FFD8FFE1[0-9a-fA-F]{4}457869660000\",\n          \"name\": \"exif\",\n          \"type\": \"image/jpeg\",\n          \"offset\": \"0\"\n        },\n      ],\n      // %PDF\n      \"JVBERg\": {\n        \"regex\": \"^25504446\",\n        \"name\": \"pdf\",\n        \"type\": \"application/pdf\",\n        \"offset\": \"0\"\n      },\n      \"R0lGOD\": [\n        // GIF87a\n        {\n          \"regex\": \"^474946383761\",\n          \"name\": \"gif\",\n          \"type\": \"image/gif\",\n          \"offset\": \"0\"\n        },\n        // GIF89a\n        {\n          \"regex\": \"^474946383961\",\n          \"name\": \"gif\",\n          \"type\": \"image/gif\",\n          \"offset\": \"0\"\n        }\n      ],\n      // II*.\n      \"SUkqAA\": {\n        \"regex\": \"^49492A00\",\n        \"name\": \"\",\n        \"type\": \"image/tiff\",\n        \"offset\": \"0\"\n      },\n      // MM.*\n      \"TU0AKg\": {\n        \"regex\": \"^4D4D002A\",\n        \"name\": \"\",\n        \"type\": \"image/tiff\",\n        \"offset\": \"0\"\n      },\n      \"AAABAA\": {\n        \"regex\": \"^00000100\",\n        \"name\": \"ico\",\n        \"type\": \"image/ico\",\n        \"offset\": \"0\"\n      },\n      // 8BPS\n      \"OEJQUw\": {\n        \"regex\": \"\",\n        \"name\": \"psd\",\n        \"type\": \"\",\n        \"offset\": \"\"\n      }\n    });\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.providers')\n    .provider('$mimeType', mimeTypeProvider);\n\n  function mimeTypeProvider() {}\n\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.utils')\n    .service('$util', UtilService);\n\n  function UtilService() {\n    var service = {};\n\n    service.hexToBase64 = hexToBase64;\n    service.base64ToHex = base64ToHex;\n    service.hop = hop;\n    service.escapeRegExp = escapeRegExp;\n\n    function hexToBase64(str) {\n      return btoa(String.fromCharCode.apply(null,\n        str.replace(/\\r|\\n/g, \"\").replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \").replace(/ +$/, \"\").split(\" \")));\n    }\n\n    function base64ToHex(str, flag) {\n      flag = !!flag;\n      for (var i = 0, bin = atob(str.replace(/[ \\r\\n]+$/, \"\")), hex = []; i < bin.length; ++i) {\n        var tmp = bin.charCodeAt(i).toString(16);\n        if (tmp.length === 1) tmp = \"0\" + tmp;\n        hex[hex.length] = tmp;\n      }\n      return hex.join(flag ? \" \" : \"\");\n    }\n\n    function hop(obj, key) {\n      return Object.prototype.hasOwnProperty.call(obj, key);\n    }\n\n    function escapeRegExp(string) {\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n    }\n\n    return service;\n  }\n})();","(function() {\n  'use strict';\n\n  angular.module('mg.mimetype.filters')\n    .filter('mimetype', function($util, fileType) {\n\n      var MAX_LEN = 255;\n      var EMPTY_STRING = \"\".toString();\n\n      return function mimeTypeFilter() {\n        var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));\n        var input = args[0];\n\n        if (input instanceof ArrayBuffer) {\n          return fromArrayBuffer(input);\n        } else if (input instanceof Blob) {\n          return fromBlob(input);\n        } else if (input instanceof String) {\n          return fromString(input);\n        } else {\n          return fromString(input);\n        }\n      };\n\n      function fromString(input) {\n        if (typeof input === 'undefined')\n          return EMPTY_STRING;\n        var found = null,\n          obj = null,\n          part, hex, res;\n        for (var prop in fileType) {\n          if ($util.hop(fileType, prop) && input.startsWith(prop)) {\n            obj = fileType[prop];\n            if (angular.isArray(obj)) {\n              for (var i = 0; i < obj.length; i++) {\n                part = input.substr(0, MAX_LEN);\n                hex = $util.base64ToHex(part, false).toUpperCase();\n                res = test(obj[i].regex, hex);\n                if (res) {\n                  return obj[i].type;\n                }\n              }\n            } else {\n              part = input.substr(0, MAX_LEN);\n              hex = $util.base64ToHex(part, false).toUpperCase();\n              res = test(obj.regex, hex);\n              if (res) {\n                return obj.type;\n              }\n            }\n          }\n        }\n        return EMPTY_STRING;\n      }\n\n      function test(regStr, compStr) {\n        return (new RegExp(regStr)).test(compStr);\n      }\n    });\n})();","if (!String.prototype.startsWith) {\n  String.prototype.startsWith = function(str2) {\n    return this.indexOf(str2) === 0;\n  };\n}"]}